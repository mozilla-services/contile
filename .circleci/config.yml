# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER    - login info for docker hub
# DOCKER_PASS
#
version: 2.1
commands:
  setup-rust:
    steps:
      - run:
          name: Setup Rust
          command: |
            rustup install stable
            rustup default stable
            rustup update
            rustc --version
  setup-rust-check:
    steps:
      - run:
          name: Setup Rust checks
          command: |
            rustup component add rustfmt
            cargo install cargo-audit
            rustup component add clippy
  rust-check:
    steps:
      - run:
          name: Core Rust Checks
          command: |
            cargo fmt -- --check
            cargo audit --ignore RUSTSEC-2020-0041
  rust-clippy:
    steps:
      - run:
          name: Rust Clippy
          command: |
            cargo clippy --all --all-targets --all-features -- -D warnings
  cargo-build:
    steps:
      - run:
          name: cargo build
          command: cargo build
  write-version:
    steps:
      - run:
          name: Create a version.json
          command: |
            # create a version.json per
            # https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json

  run-tests:
    steps:
      - run:
          name: cargo test
          command: cargo test --all --verbose

  setup-sccache:
    steps:
      - run:
          name: Install sccache
          command: |
            cargo install sccache
            # This configures Rust to use sccache.
            echo 'export "RUSTC_WRAPPER"="sccache"' >> $BASH_ENV
            # This is the maximum space sccache cache will use on disk.
            echo 'export "SCCACHE_CACHE_SIZE"="1G"' >> $BASH_ENV
            sccache --version
  restore-sccache-cache:
    steps:
      - restore_cache:
          name: Restore sccache cache
          key: sccache-cache-stable-{{ .Branch }}-{{ .Environment.CIRCLE_TAG }}
  save-sccache-cache:
    steps:
      - save_cache:
          name: Save sccache cache
          key: sccache-cache-stable-{{ .Branch }}-{{ .Environment.CIRCLE_TAG }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"
jobs:
  checks:
    docker:
      - image: circleci/rust:latest
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - setup-rust
      - setup-rust-check
      - rust-check
      - rust-clippy

  test:
    docker:
      - image: circleci/rust:latest
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
          RUST_BACKTRACE: 1
          # XXX: begin_test_transaction doesn't play nice over threaded tests
          RUST_TEST_THREADS: 1
    steps:
      - checkout
      - setup-rust
      - write-version
      - cargo-build
      - run-tests

  build:
    docker:
      - image: circleci/rust:latest
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
            RUST_BACKTRACE: 1
            # XXX: begin_test_transaction doesn't play nice over threaded tests
            RUST_TEST_THREADS: 1
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
          = run:
            name: Login to Dockerhub
            command: |
              if [ "${DOCKER_USER}" == "" ] || [ "${DOCKER_PASS}" == "" ]; then
                echo "Skipping Login to DockerHub, credentials unavailable"
              else
                echo "${DOCKER_PASS}" | docker login -u="${DOCKER_USER}" --password-stdin
              fi
      #- save-sccache-cache
      - checkout
      - run:
          name: Build Docker image
          command: docker build -t app:build .
      # save the built docker container into CircleCI's cache. This is
      # required since Workflows do not have the same remote docker instance.
      - run:
          name: docker save app:build
          command: |
            mkdir -p /home/circleci/cache
            docker save -o /home/circleci/cache/docker.tar "app:build"
      - save_cache:
          key: v1-{{ .Branch }}-{{ .Environment.CIRCLE_TAG }}-{{ epoch }}
          paths:
            - /home/circleci/cache

  deploy:
    docker:
      - image: docker:18.02.0-ce
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - setup_remote_docker
      - restore_cache:
          key: v1-{{ .Branch }}-{{ .Environment.CIRCLE_TAG }}
      - run:
          name: Restore Docker image cache
          command: docker load -i /home/circleci/cache/docker.tar
      - run:
          name: Deploy to Dockerhub
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              DOCKER_TAG="${CIRCLE_SHA1}"
            fi

            if echo "${CIRCLE_BRANCH}" | grep '^feature\..*' > /dev/null; then
              DOCKER_TAG="${CIRCLE_BRANCH}"
            fi

            if [ -n "${CIRCLE_TAG}" ]; then
              DOCKER_TAG="$CIRCLE_TAG"
            fi

            if [ -n "${DOCKER_TAG}" ]; then
              echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
              echo ${DOCKERHUB_REPO}:${DOCKER_TAG}
              docker tag app:build ${DOCKERHUB_REPO}:${DOCKER_TAG}
              docker images
              docker push "${DOCKERHUB_REPO}:${DOCKER_TAG}"
            else
              echo "Not pushing to dockerhub for tag=${CIRCLE_TAG} branch=${CIRCLE_BRANCH}"
            fi
  contile-integration-tests:
    machine:
      docker_layer_caching: true
      image: ubuntu-2004:202101-01 # Ubuntu 20.04, Docker v20.10.2, Docker Compose v1.28.2
    working_directory: ~/contile
    steps:
      - restore_cache:
          key: v1-{{ .Branch }}-{{ .Environment.CIRCLE_TAG }}
      - run:
         command: pwd
         #command: docker-compose -f /home/circleci/project/contile/docker-compose.yml run client
      #     name: git_checkout
      #     command: git clone -b create-CI-WF --depth 1 https://github.com/mozilla-services/contile-integration-tests.git
      #     # command: git clone --depth 1 https://github.com/mozilla-services/contile-integration-tests.git
      # - run:
      #     name: building_images
      #     command: docker-compose -f contile-integration-tests/docker-compose.yml up -d

workflows:
  version: 2
  build-deploy:
    jobs:
      # - checks:
      #     filters:
      #       tags:
      #         only: /.*/
      # - build:
      #     filters:
      #       tags:
      #         only: /.*/
      # - test:
      #     filters:
      #       tags:
      #         only: /.*/
      #     requires:
      #       - build
      - contile-integration-tests:
          name: contile-integration-tests
          #requires:
          #  - build
          filters:
            branches:
              ignore:
                - main
      # - deploy:
      #     requires:
      #       - build
      #       - test
      #     filters:
      #       tags:
      #         only: /.*/
