# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKERHUB_CONTILE_LOAD_TEST_REPO - docker hub repo for performance test, format: <username>/<repo>
# DOCKER_USER    - login info for docker hub
# DOCKER_PASS
#
version: 2.1

parameters:
  rust-version:
    type: string
    # NOTE: Ensure this Rust version matches the builder's in ../Dockerfile
    default: "1.68"

commands:
  dockerhub-login:
    steps:
      - run:
          name: Login to Dockerhub
          command: |
            if [ "${DOCKER_USER}" == "" ] || [ "${DOCKER_PASS}" == "" ]; then
              echo "Skipping Login to DockerHub, credentials unavailable"
            else
              echo "${DOCKER_PASS}" | docker login -u="${DOCKER_USER}" --password-stdin
            fi
  python-checks:
    description: Execute Python linters and formatters (isort, black, flake8 & mypy)
    parameters:
      files:
        type: string
        default: .
    steps:
      - run:
          name: setup poetry
          command: |
            poetry -V
            poetry install
      - run:
          name: isort
          command: poetry run isort --check-only << parameters.files >>
      - run:
          name: black
          command: poetry run black --quiet --diff --check << parameters.files >>
      - run:
          name: flake8
          command: poetry run flake8 << parameters.files >>
      - run:
          name: mypy
          command: poetry run mypy << parameters.files >>
  setup-rust:
    steps:
      - run:
          name: Setup Rust
          command: |
            rustc --version
  setup-rust-check:
    steps:
      - run:
          name: Setup Rust checks
          command: |
            rustup component add rustfmt
            cargo install cargo-audit
            rustup component add clippy
  rust-check:
    steps:
      - run:
          name: Core Rust Checks
          command: |
            cargo fmt -- --check
            cargo audit
  rust-clippy:
    steps:
      - run:
          name: Rust Clippy
          command: |
            cargo clippy --all --all-targets --all-features -- -D warnings
  cargo-build:
    steps:
      - run:
          name: cargo build
          command: cargo build
  write-version:
    steps:
      - run:
          name: Create a version.json
          command: |
            # create a version.json per
            # https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json

jobs:
  checks:
    docker:
      - image: cimg/rust:<< pipeline.parameters.rust-version >>
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - setup-rust
      - setup-rust-check
      - rust-check
      - rust-clippy

  test:
    docker:
      - image: cimg/rust:<< pipeline.parameters.rust-version >>
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
          RUST_BACKTRACE: 1
          # XXX: begin_test_transaction doesn't play nice over threaded tests
          RUST_TEST_THREADS: 1
    steps:
      - checkout
      - setup-rust
      - cargo-build
      - run:
          name: Install cargo2junit
          command: cargo install cargo2junit --locked
      - run:
          name: Install cargo-llvm-cov
          command: cargo install cargo-llvm-cov
      - run:
          name: Run and report tests and coverage (Minimum 67%)
          command: |
            cargo llvm-cov --no-report test -- -Z unstable-options --format json --report-time | cargo2junit > results.xml
            cargo llvm-cov report --fail-under-lines 67 --html
      - store_test_results:
          path: results.xml
      - store_artifacts:
          path: target/llvm-cov/html # Default location
          destination: llvm-cov/html

  build:
    docker:
      - image: cimg/rust:<< pipeline.parameters.rust-version >>
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
          RUST_BACKTRACE: 1
          # XXX: begin_test_transaction doesn't play nice over threaded tests
          RUST_TEST_THREADS: 1
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - write-version
      - run:
          name: Build Docker image
          command: |
            docker build \
              -t app:build \
              --build-arg VERSION="$(echo ${CIRCLE_SHA1} | cut -c -7)" .
      - run:
          name: Save image into workspace
          command: |
            mkdir -p /tmp/workspace
            docker save -o /tmp/workspace/contile.tar app:build
            gzip /tmp/workspace/contile.tar
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - contile.tar.gz

  docker-image-publish:
    # The commit tag signals deployment and load test instructions to Jenkins by
    # modifying the Docker image tag name. Pushing a new Docker image to the Docker Hub registry
    # triggers a webhook that starts the Jenkins deployment workflow. The convention looks as follows:
    #^(?P<environment>stage|prod)(?:-(?P<task>\w+)-(?P<onfailure>warn|abort))?-(?P<commit>[a-z0-9]+)$
    docker:
      - image: cimg/base:2022.08
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load Docker image from workspace
          command: docker load -i /tmp/workspace/contile.tar.gz
      - dockerhub-login
      - run:
          name: Deploy Stage to Dockerhub
          command: |
            if git log -1 "$CIRCLE_SHA1" | grep -q '\[load test: warn\]'; then
              echo "Load test requested. Slack warning will be output if test fails and deployment workflow for prod will proceed."
              STAGE_DOCKER_TAG="stage-loadtest-warn-${CIRCLE_SHA1}"
            elif git log -1 "$CIRCLE_SHA1" | grep -q '\[load test: abort\]'; then
              echo "Load test requested. Deployment workflow for prod will abort if load test fails."
              STAGE_DOCKER_TAG="stage-loadtest-abort-${CIRCLE_SHA1}"
            else
              STAGE_DOCKER_TAG="stage-${CIRCLE_SHA1}"
            fi
            echo ${DOCKERHUB_REPO}:${STAGE_DOCKER_TAG}
            docker tag app:build ${DOCKERHUB_REPO}:${STAGE_DOCKER_TAG}
            docker images
            docker push "${DOCKERHUB_REPO}:${STAGE_DOCKER_TAG}"
      - run:
          name: Deploy Production to Dockerhub
          command: |
            PROD_DOCKER_TAG="prod-${CIRCLE_SHA1}"
            echo "${DOCKERHUB_REPO}:${PROD_DOCKER_TAG}"
            docker tag app:build "${DOCKERHUB_REPO}:${PROD_DOCKER_TAG}"
            docker tag app:build "${DOCKERHUB_REPO}:latest"
            docker images
            docker push "${DOCKERHUB_REPO}:${PROD_DOCKER_TAG}"
            docker push "${DOCKERHUB_REPO}:latest"

  contract-test-checks:
    docker:
      - image: cimg/python:3.11
    working_directory: "~/contile/test-engineering/contract"
    steps:
      - checkout:
          path: ~/contile/
      - python-checks:
          files: client partner

  contract-tests:
    machine:
      image: ubuntu-2004:2023.04.2
    working_directory: ~/contile
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load Docker image from workspace
          command: docker load -i /tmp/workspace/contile.tar.gz
      - run:
          name: Build client and partner images
          environment:
            TEST_RESULTS_DIR: test-results
          command: |
            docker-compose --version
            docker-compose \
             -f test-engineering/contract/docker-compose.yml \
             build client partner
      - run:
          name: Run contract tests
          environment:
            TEST_RESULTS_DIR: test-results
            TEST_RESULTS_XML: contract_results.xml
          command: |
            docker-compose \
             -f test-engineering/contract/docker-compose.yml \
             up --abort-on-container-exit --force-recreate
      - run:
          name: Run "tiles cache" contract tests
          environment:
            TEST_RESULTS_DIR: test-results
            TEST_RESULTS_XML: contract_results.tiles_cache.xml
          command: |
            docker-compose \
             -f test-engineering/contract/docker-compose.yml \
             -f test-engineering/contract/docker-compose.tiles_cache.yml \
             up --abort-on-container-exit --force-recreate
      - run:
          name: Run "204" contract tests
          environment:
            TEST_RESULTS_DIR: test-results
            TEST_RESULTS_XML: contract_results.204.xml
          command: |
            docker-compose \
             -f test-engineering/contract/docker-compose.yml \
             -f test-engineering/contract/docker-compose.204.yml \
             up --abort-on-container-exit --force-recreate
      - run:
          name: Run "init_error" contract tests
          command: |
            set +e # We need this so that the run doesn't exit after docker-compose
            docker-compose \
             -f test-engineering/contract/docker-compose.yml \
             -f test-engineering/contract/docker-compose.init_error.yml \
             up --abort-on-container-exit --exit-code contile --force-recreate
            contile_exit_code=$?
            if [ "${contile_exit_code}" -eq 0 ]; then
             echo "Expected non-zero exit_code from Contile service"
             exit 1
            else
             echo "Contile service exit_code: ${contile_exit_code}"
             exit 0
            fi
      - store_test_results:
          path: test-engineering/contract/test-results

  load-test-checks:
    docker:
      - image: cimg/python:3.11
    working_directory: "~/contile/test-engineering/load"
    steps:
      - checkout:
          path: ~/contile/
      - python-checks:
          files: common locustfiles

  docker-image-publish-locust:
    docker:
      - image: cimg/base:2023.07
    working_directory: "~/contile/test-engineering/load"
    steps:
      - checkout:
          path: ~/contile/
      - run:
          name: Check for load test directive
          command: |
            if ! git log -1 "$CIRCLE_SHA1" | grep -q '\[load test: abort\|warn\]'; then
              echo "Skipping remaining steps in this job: load test not required."
              circleci-agent step halt
            fi
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build image
          command: docker build -t contile-locust .
      - dockerhub-login
      - run:
          name: Push to Docker Hub
          command: |
            DOCKER_TAG="${CIRCLE_SHA1}"
            echo ${DOCKERHUB_CONTILE_LOAD_TEST_REPO}:${DOCKER_TAG}
            docker tag contile-locust ${DOCKERHUB_CONTILE_LOAD_TEST_REPO}:${DOCKER_TAG}
            docker tag contile-locust ${DOCKERHUB_CONTILE_LOAD_TEST_REPO}:latest
            docker images
            docker push "${DOCKERHUB_CONTILE_LOAD_TEST_REPO}:${DOCKER_TAG}"
            docker push "${DOCKERHUB_CONTILE_LOAD_TEST_REPO}:latest"
  docs-build:
    docker:
      - image: cimg/base:2022.08
    steps:
      - checkout
      - run:
          name: Setup Build docs
          command: |
            mkdir bin
            echo 'export PATH=$(pwd)/bin:"$PATH"' >> "$BASH_ENV"
            source "$BASH_ENV"
            curl -sSL \
              https://github.com/rust-lang/mdBook/releases/download/v0.4.24/mdbook-v0.4.24-x86_64-unknown-linux-gnu.tar.gz \
              | tar -xz --directory=bin
            curl -sSL \
              https://github.com/badboy/mdbook-mermaid/releases/download/v0.12.6/mdbook-mermaid-v0.12.6-x86_64-unknown-linux-gnu.tar.gz \
              | tar -xz --directory=bin
      - run:
          name: Build docs
          command: |
            make build-docs
            mkdir workspace
            cp -r ./book workspace/doc
      - persist_to_workspace:
          root: workspace
          paths:
            - doc
  docs-publish-github-pages:
    docker:
      - image: cimg/node:16.18.1
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "fb:66:d0:7c:9e:0c:48:b1:ae:0c:55:b5:c0:d5:bd:e7"
      - attach_workspace:
          at: workspace
      - run:
          name: Disable jekyll builds
          command: touch workspace/doc/.nojekyll
      - run:
          name: Set remote origin if needed
          command: |
            git remote add origin git@github.com:mozilla-services/contile.git || true
      - run:
          name: Deploy docs to gh-pages
          command: |
            npx --yes gh-pages@3.0.0 \
              --user "ci-build <ci-build@contile.mozilla.org>" \
              --message "[skip ci] Docs updates" \
              --repo "git@github.com:mozilla-services/contile.git" \
              --dist workspace/doc
workflows:
  version: 2
  pr-workflow:
    jobs:
      - checks: &pr-filters
          filters:
            branches:
              ignore: main
      - build:
          <<: *pr-filters
      - test:
          <<: *pr-filters
      - contract-test-checks:
          <<: *pr-filters
      - contract-tests:
          <<: *pr-filters
          requires:
            - build
            - contract-test-checks
      - load-test-checks:
          <<: *pr-filters

  main-workflow:
    jobs:
      - checks: &main-filters
          filters:
            branches:
              only: main
      - build:
          <<: *main-filters
      - test:
          <<: *main-filters
      - contract-test-checks:
          <<: *main-filters
      - contract-tests:
          <<: *main-filters
          requires:
            - build
            - contract-test-checks
      - load-test-checks:
          <<: *main-filters
      - docker-image-publish-locust:
          <<: *main-filters
          requires:
            - checks
            - test
            - contract-tests
            - load-test-checks
      - docker-image-publish:
          <<: *main-filters
          requires:
            - docker-image-publish-locust     
      - docs-build:
          <<: *main-filters
      - docs-publish-github-pages:
          <<: *main-filters
          requires:
            - docs-build
